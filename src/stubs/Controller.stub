<?php
namespace App\Http\Controllers;
use App\Http\Controllers\Controller;
use {{ repositoryNamespace }}\{{ ClassName }}Interface;
use {{ requestNamespace }}\Store{{ ClassName }}Request;
use {{ requestNamespace }}\Update{{ ClassName }}Request;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;

class {{ ClassName }}Controller extends Controller
{
    /**
     * The repository instance.
     *
     * @var {{ ClassName }}Interface
     */
    protected {{ ClassName }}Interface ${{ variable }};

    public function __construct({{ ClassName }}Interface ${{ variable }})
    {
        $this->{{ variable }} = ${{ variable }};
    }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $data = $this->{{ variable }}->paginate(10);
        return view('{{ viewPath }}.index', compact('data'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        return view('{{ viewPath }}.create');
    }

    /**
     * Store a newly created resource.
     */
    public function store(Store{{ ClassName }}Request $request)
    {
        $result = $this->{{ variable }}->store($request->validated());

        if ($result->status) {
            return redirect()->route($result->redirect_to)->with('success', $result->message);
        }

        return back()->with('danger', $result->message);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(int $id)
    {
        $data = $this->{{ variable }}->find($id);
        return view('{{ viewPath }}.edit', compact('data'));
    }

    /**
     * Update the specified resource.
     */
    public function update(Update{{ ClassName }}Request $request, int $id)
    {
        $result = $this->{{ variable }}->update($id, $request->validated());

        if ($result->status) {
            return redirect()->route($result->redirect_to)->with('success', $result->message);
        }

        return back()->with('danger', $result->message);
    }

    /**
     * Remove the specified resource.
     */
    public function destroy(int $id)
    {
        $result = $this->{{ variable }}->destroy($id);

        if ($result->status) {
            return redirect()->route($result->redirect_to)->with('success', $result->message);
        }

        return back()->with('danger', $result->message);
    }

    /**
     * Toggle status of the resource.
     */
    public function statusUpdate(int $id)
    {
        $result = $this->{{ variable }}->statusUpdate($id);

        if ($result->status) {
            return redirect()->route($result->redirect_to ?? '{{ viewPath }}.index')
                ->with('success', $result->message);
        }

        return back()->with('danger', $result->message);
    }

    /**
     * Search resource by filters.
     */
    public function search(array $filters = [], int $limit = 10): LengthAwarePaginator
    {
        return $this->{{ variable }}->search($filters, $limit);
    }

    /**
     * Restore a soft-deleted resource.
     */
    public function restore(int $id)
    {
        $result = $this->{{ variable }}->restore($id);

        if ($result->status) {
            return redirect()->route($result->redirect_to)->with('success', $result->message);
        }

        return back()->with('danger', $result->message);
    }
}
